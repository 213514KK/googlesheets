% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gs_read_listfeed.R
\name{gs_read_listfeed}
\alias{gs_read_listfeed}
\title{Read data via the "list feed"}
\usage{
gs_read_listfeed(ss, ws = 1, reverse = NULL, orderby = NULL, sq = NULL,
  ..., verbose = TRUE)
}
\arguments{
\item{ss}{a registered Google spreadsheet, i.e. a \code{\link{googlesheet}}
object}

\item{ws}{positive integer or character string specifying index or title,
respectively, of the worksheet}

\item{reverse}{logical, optional. Indicates whether to request reverse row
order in the actual API call.}

\item{orderby}{character, optional. Specifies a column to sort on in the
actual API call.}

\item{sq}{character, optional. Provides a structured query for row filtering
in the actual API call.}

\item{...}{Further arguments to control parsing, most of which are passed to
\code{\link[readr:type_convert]{readr::type_convert}}.}

\item{verbose}{logical; do you want informative messages?}
}
\value{
a tbl_df
}
\description{
Gets data via the "list feed", which assumes populated cells form a neat
rectangle. The list feed consumes data row by row. The first row is assumed
to hold variable or column names. The related function,
\code{\link{gs_read_csv}}, also returns data from a rectangle of cells, but
it is generally faster and more resilient to, e.g. empty header cells or
rows, so use it if you can. However, you may need to use this function if you
are dealing with an "old" Google Sheet, which is beyond the reach of
\code{\link{gs_read_csv}}. The list feed also has some ability to sort and
filter rows via the API (more below). Consult the Google Sheets API
documentation for more details about
\href{https://developers.google.com/google-apps/spreadsheets/data#work_with_list-based_feeds}{the
list feed}.
}
\section{Data ingest philosophy}{


  \code{\link{gs_read_csv}} is the "reference implementation" for ingesting
  data from a Google Sheet. This, in turn, implies that
  \code{\link[readr:read_delim]{readr::read_csv}} is the true reference. Use
  the \code{...} argument to control parsing behavior.
  \code{gs_read_listfeed} cannot actually pass the data through
  \code{\link[readr:read_delim]{readr::read_csv}}, but instead uses
  \code{\link[readr:type_convert]{readr::type_convert}}. Therefore, arguments
  passed via \code{...} are used in different ways. Some are used directly in
  \code{gs_read_listfeed} (example: \code{col_names}). Some are passed
  through to \code{\link[readr:type_convert]{readr::type_convert}} (example:
  \code{col_types}). Some are ignored because they are incompatible with the
  list feed (example: \code{comment}).
}

\section{Column names}{


  When you use the list feed, the Sheets API transforms the variable or
  column names like so: 'The column names are the header values of the
  worksheet lowercased and with all non-alpha-numeric characters removed. For
  example, if the cell A1 contains the value "Time 2 Eat!" the column name
  would be "time2eat".' If this is intolerable to you, use a different
  function to read the data. Or, at least, consume the first row via the cell
  feed and manually restore the variable names \emph{post hoc}. If you direct
  \code{gs_read_listfeed} to pass query parameters to the actual API call,
  you must refer to variables using the column names \emph{after this
  API-enforced transformation}. For example, to order the data by the column
  with "Time 2 Eat!" in the header row, you must specify \code{orderby =
  "time2eat"} in the \code{gs_read_listfeed} call.
}

\section{Sorting and filtering via the API}{


  Why on earth would you want to sort and filter via the API instead of in R?
  Just because you can? It is conceivable there are situations, such as a
  large spreadsheet, in which it is faster to sort or filter via API. Be sure
  to refer to variables using the API-transformed column names explained
  above! It is a
  \href{https://code.google.com/a/google.com/p/apps-api-issues/issues/detail?id=3588}{known
   bug} that \code{reverse=true} alone will NOT, in fact, reverse the row
  order of the result. In our experience, the \code{reverse} query parameter
  will only have effect in combination with explicit specification of a
  column to sort on via \code{orderby}. The syntax for these queries
  \href{http://stackoverflow.com/questions/25732784/official-reference-for-google-spreadsheet-api-structured-query-syntax}{is
   apparently undocumented}, so keep it simple or bring your spirit of
  adventure!
}
\examples{
\dontrun{
gap_ss <- gs_gap() # register the Gapminder example sheet
oceania_lf <- gs_read_listfeed(gap_ss, ws = "Oceania")
head(oceania_lf, 3)

## do row ordering and filtering in the API call
oceania_fancy <-
  gs_read_listfeed(gap_ss,
                   ws = "Oceania",
                   reverse = TRUE, orderby = "gdppercap",
                   sq = "lifeexp > 79 or year < 1960")
oceania_fancy

## modify data ingest in style of readr::read_csv, readr::type_convert
oceania_tweaked <-
  gs_read_listfeed(gap_ss,
                   ws = "Oceania",
                   col_names = paste0("VAR", 1:6),
                   col_types = "cccnnn")
oceania_tweaked
}

}
\seealso{
Other data.consumption.functions: \code{\link{gs_read_cellfeed}},
  \code{\link{gs_read_csv}}, \code{\link{gs_read}},
  \code{\link{gs_reshape_cellfeed}},
  \code{\link{gs_simplify_cellfeed}}
}

